class Solution {

    /**
     * @param Integer[] $coins
     * @param Integer $amount
     * @return Integer
     */
    function coinChange($coins, $amount) {
        //создает массив $dp длиной $amount, заполняя его значениями PHP_INT_MAX. Этот массив будет использоваться для хранения оптимальных решений для подсумм от 1 до $amount.
        $dp = array_fill(1, $amount, PHP_INT_MAX);
        //устанавливает значение в $dp[0] равным 0, потому что для получения суммы 0 не требуется ни одной монеты.
        $dp[0] = 0;
        
        for($i = 1; $i <= $amount; $i++){
            //проверяет, что номинал монеты $coin не больше текущей суммы $i. Если номинал больше, то переходим к следующей итерации.
            foreach($coins as $coin){
                if($coin - $i > 0){
                    continue;
                }
                
                //здесь происходит обновление значения в массиве $dp. Мы берем минимум из текущего значения $dp[$i] и (1 + $dp[$i - $coin]), 
                //где $dp[$i - $coin] представляет собой оптимальное решение для суммы $i - $coin, увеличенное на 1 (так как мы добавляем одну монету к решению).
                $dp[$i] = min($dp[$i], 1 + $dp[$i - $coin]);
            }
        }
               
        //После завершения всех итераций циклов, в $res сохраняется результат для суммы $amount.
        $res = $dp[count($dp) - 1];
        return $res === PHP_INT_MAX ? -1 : $res;
        
    }
}